name: Build Container Image and Preview Environment

on:
  pull_request:
    branches:
      - '*'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      build-and-deploy: ${{ steps.evaluate.outputs.build-and-deploy }}
    
    steps:
      - name: Log Event
        run: echo "${{ toJson(github.event) }}"

      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            elements-application:
              - 'elements-application/**'

      - name: Set Deployment Requirement
        id: evaluate
        # Always do a full build if the PR is newly opened, or the app 
        # source was modified, or this run is due to dispatch
        run: |
          echo "steps.changes.outputs.elements-application: ${{steps.changes.outputs.elements-application}}"
          echo "github.event.action == 'opened': ${{github.event.action == 'opened'}}"
          echo "github.event.action == 'reopened': ${{github.event.action == 'reopened'}}"
          echo "github.event_name == 'workflow_dispatch': ${{github.event_name == 'workflow_dispatch'}}"
          echo "build-and-deploy=${{ steps.changes.outputs.elements-application == 'true' || github.event.action == 'opened' || github.event.action == 'reopened' || github.event_name == 'workflow_dispatch' }}" >> "$GITHUB_OUTPUT"


  build-container:
    runs-on: ubuntu-latest
    needs: changes

    # Only build the container image if the application source has changed,
    # or a build is explicitly requested via a dispatch event
    if: needs.changes.outputs.build-and-deploy == 'true'
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push
      uses: docker/build-push-action@v5
      with:
        push: true
        context: elements-application/
        file: elements-application/Containerfile
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/neon-kube-previews:${{ github.event.pull_request.head.sha }}
  
  create-preview-environment:
    runs-on: ubuntu-latest

    # Wait for the docker build and push to complete prior to running this job
    needs: build-container

    # Only push changes to Argo CD and the PR comment if necessary. If the
    # application code has not changed, simply skip this step since Argo CD
    # will fetch the new Kubernetes manifests in helm/ automatically
    if: needs.changes.outputs.build-and-deploy == 'true'

    # This permission is required to comment with the preview URL on the PR
    permissions: 
      pull-requests: write 

    steps:

    # The current branch is passed to Argo CD to ensure the correct manifests
    # are used when deploying the application on Kubernetes
    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    # Create a new branch on Neon using the PR number in the branch name. This
    # operation is idempotent, so it's effectively a no-op if more commits are
    # push to the original PR
    - name: Create Neon Branch and Compute for PR
      id: create-branch
      uses: neondatabase/create-branch-action@v4
      with:
        api_key: ${{ secrets.NEON_API_KEY }}
        project_id: ${{ secrets.NEON_PROJECT_ID }}
        # branch_name refers to the Neon branch, not a Git branch
        branch_name: pr-${{ github.event.number }}
        parent: main

    - name: Install the Argo CD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v2.8.4/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64

    - name: Login to Argo CD
      # Note that the ARGO_CD_HOSTNAME must not contain a protocol or trailing
      # slashes. It should only be a hostname, e.g argocd.example.com
      run: argocd login ${{ secrets.ARGOCD_HOSTNAME }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}

    - name: Prepare ngrok preview URL
      # If NGROK_SUBDOMAIN is set in secrets it's assumed that a preview
      # URL should be generated and posted as a comment on the PR. 
      if: env.NGROK_SUBDOMAIN
      id: generate-ingress-domain
      run: echo "::set-output name=domain::pr-${{ github.event.number }}.${{ env.NGROK_SUBDOMAIN }}"
      env:
        NGROK_SUBDOMAIN: ${{ secrets.NGROK_SUBDOMAIN }} 

    - name: Create the Preview Environment using Argo CD
      # This command will perform an upsert of an Argo CD application, i.e create
      # a new applicatin, or update an existing application associated with this
      # PR. The Argo CD application and created ingress use the format nkp-pr-{{number}}
      # where {{number}} is the PR number.
      run: |
        argocd app create nkp-pr-${{github.event.number}} \
        --repo https://github.com/${{ github.repository_owner }}/neon-kube-previews \
        --revision ${{ steps.branch-name.outputs.current_branch }} \
        --dest-namespace nkp-pr-${{github.event.number}} \
        --dest-server https://kubernetes.default.svc \
        --values values.dev.yaml \
        --path helm \
        --helm-set database.url=${{ steps.create-branch.outputs.db_url }} \
        --helm-set deployment.image.repository=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/neon-kube-previews \
        --helm-set deployment.image.tag=${{ github.event.pull_request.head.sha }} \
        --helm-set namespace=nkp-pr-${{ github.event.number }} \
        --helm-set ingress.domain="${{ steps.generate-ingress-domain.outputs.domain }}" \
        --self-heal \
        --sync-option 'CreateNamespace=true' \
        --sync-policy auto \
        --upsert \
        --auto-prune

    - name: Comment on Pull Request
      uses: thollander/actions-comment-pull-request@v2
      if: steps.generate-ingress-domain.outputs.domain
      with:
        message: |
          :rocket: Preview URL: https://${{ steps.generate-ingress-domain.outputs.domain }}
          :octopus: Argo CD URL: https://${{ secrets.ARGOCD_HOSTNAME }}/applications/argocd/nkp-pr-${{github.event.number}}
        # Comment tag allows the action to update an existing comment, if one
        # exists. This prevents a flood of similar comments
        comment_tag: preview-url
